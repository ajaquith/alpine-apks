Author: Andrew Jaquith
Summary: Fixes code to run under Python 3; adds detections for Alpine and openrc init.
--- src/efs-utils-1.12/src/mount_efs/__init__.py	2019-08-15 15:53:14.000000000 -0400
+++ patch-src/mount_efs.py	2019-08-15 14:20:39.000000000 -0400
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Copyright 2017-2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 #
@@ -108,6 +108,8 @@ STUNNEL_EFS_CONFIG = {
 
 WATCHDOG_SERVICE = 'amazon-efs-mount-watchdog'
 SYSTEM_RELEASE_PATH = '/etc/system-release'
+SYSTEM_ALPINE_RELEASE_PATH = '/etc/alpine-release'
+ALPINE_RELEASE_NAME = 'Alpine Linux'
 RHEL8_RELEASE_NAME = 'Red Hat Enterprise Linux release 8'
 
 
@@ -263,6 +265,7 @@ def get_version_specific_stunnel_options
     proc = subprocess.Popen(['stunnel', '-help'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
     proc.wait()
     _, err = proc.communicate()
+    err = err.decode('utf-8')
 
     stunnel_output = err.splitlines()
 
@@ -277,8 +280,14 @@ def get_system_release_version():
     try:
         with open(SYSTEM_RELEASE_PATH) as f:
             system_release_version = f.read().strip()
+            logging.debug('Detected system release version: %s', system_release_version)
     except IOError:
-        logging.debug('Unable to read %s', SYSTEM_RELEASE_PATH)
+        try:
+            with open(SYSTEM_ALPINE_RELEASE_PATH) as f:
+                system_release_version = '%s %s' % (ALPINE_RELEASE_NAME, f.read().strip())
+                logging.debug('Detected system release version: %s', system_release_version)
+        except IOError:
+            logging.debug('Unable to read %s', SYSTEM_RELEASE_PATH)
 
     return system_release_version
 
@@ -323,7 +332,7 @@ def write_stunnel_config_file(config, st
         else:
             fatal_error(tls_controls_message % 'stunnel_check_cert_validity')
 
-    if RHEL8_RELEASE_NAME not in get_system_release_version():
+    if RHEL8_RELEASE_NAME not in get_system_release_version() and ALPINE_RELEASE_NAME not in get_system_release_version():
         efs_config['libwrap'] = 'no'
 
     stunnel_config = '\n'.join(serialize_stunnel_config(global_config) + serialize_stunnel_config(efs_config, 'efs'))
@@ -385,7 +394,11 @@ def get_init_system(comm_file='/proc/1/c
             init_system = f.read().strip()
     except IOError:
         logging.warning('Unable to read %s', comm_file)
-
+    
+    if init_system == 'init':
+        if os.path.isfile('/sbin/openrc'):
+            init_system = 'openrc-init'
+    
     logging.debug('Identified init system: %s', init_system)
     return init_system
 
@@ -413,7 +426,18 @@ def start_watchdog(init_system):
                 subprocess.Popen(['/sbin/start', WATCHDOG_SERVICE], stdout=devnull, stderr=devnull, close_fds=True)
         elif 'start' in status:
             logging.debug('%s is already running', WATCHDOG_SERVICE)
-
+    
+    elif init_system == 'openrc-init':
+        proc = subprocess.Popen(
+                ['/sbin/service', WATCHDOG_SERVICE, 'status'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
+        status, _ = proc.communicate()
+        status = status.decode('utf-8').strip()
+        if 'stopped' in status:
+            with open(os.devnull, 'w') as devnull:
+                subprocess.Popen(['/sbin/service', WATCHDOG_SERVICE, 'start'], stdout=devnull, stderr=devnull, close_fds=True)
+        elif 'started' in status:
+            logging.debug('%s is already running', WATCHDOG_SERVICE)
+    
     elif init_system == 'systemd':
         rc = subprocess.call(['systemctl', 'is-active', '--quiet', WATCHDOG_SERVICE], close_fds=True)
         if rc != 0:
@@ -580,7 +604,7 @@ def assert_root():
 
 
 def read_config(config_file=CONFIG_FILE):
-    p = ConfigParser.SafeConfigParser()
+    p = ConfigParser()
     p.read(config_file)
     return p
 
